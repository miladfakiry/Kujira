@using MudBlazor
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using Kujira.Gui.Services
@using System.Security.Claims
@inject AuthenticationService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<CascadingAuthenticationState>
<MudLayout>
    
    @*Header AppBar*@
    <MudAppBar Color="Color.Primary" Fixed="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />

            <MudMenu>
                <ActivatorContent>
                    <MudAvatar Image="images/ProfilePicture.jpg" />
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem OnClick="@Logout">Logout</MudMenuItem>
                </ChildContent>
            </MudMenu>
        
    </MudAppBar>
    
    @*Left NavBar*@
    <MudDrawer @bind-Open="@_drawerOpen">
        <MudNavMenu>
            <MudPaper Class="d-flex justify-center flex-grow-1 gap-0" Elevation="0">
                <MudImage Src="Images/KujiraTransparent.png" Width="55" Height="55" Alt="Kujira logo" />
            </MudPaper>
            <MudDivider Class="my-2"/>
            <MudNavLink Href="/dashboard" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
            <MudNavGroup Title="Applikationen" Icon="@Icons.Material.Filled.SettingsApplications" Expanded="true">
                @if (isSocialService)
                {
                    <MudNavLink Href="/searchPage">Platzsuche</MudNavLink>
                }
                @if (isAssociation)
                {
                    <MudNavLink Href="/offerPlaces">Plätze anbieten</MudNavLink>
                    <MudNavLink Href="/showUserOffer">Angebotene Plätze</MudNavLink>
                }
            </MudNavGroup>
            
            @if (isAdmin)
            {
                <MudNavGroup Title="Adminbereich" Icon="@Icons.Material.Filled.AdminPanelSettings" Expanded="true">
                    <MudNavLink Href="/adminUser">Users</MudNavLink>
                    <MudNavLink Href="/adminPlaces">Places</MudNavLink>
                    <MudNavLink Href="/adminCompany">Companies</MudNavLink>
                </MudNavGroup>
            }
        </MudNavMenu>
        
        @*Footer AppBar*@
        <MudAppBar Bottom="true" Fixed="true" Color="Color.Primary" Elevation="1">
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Inherit" Edge="Edge.End" />
            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
        </MudAppBar>
        
        @*Version of Application*@
        <MudContainer Class="d-flex flex-column-reverse flex-grow-1">
            <MudText Typo="Typo.caption">Version 0.1</MudText>
        </MudContainer>

    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
</CascadingAuthenticationState>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool _drawerOpen = true;
    private bool isAdmin = false;
    private bool isAssociation = false;
    private bool isSocialService = false;

    private ClaimsPrincipal user = new ClaimsPrincipal();

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += AuthenticationStateChanged;
        await CheckRoles();
        StateHasChanged();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private async Task CheckRoles()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        Console.WriteLine($"IsAuthenticated: {user.Identity.IsAuthenticated}");

        isAdmin = user.IsInRole("Administrator");
        isAssociation = user.IsInRole("Association");
        isSocialService = user.IsInRole("SocialService");

        StateHasChanged();
    }

    private async void AuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await CheckRoles();
        await Task.CompletedTask;
        StateHasChanged();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= AuthenticationStateChanged;
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).NotifyUserLogout();
        NavigationManager.NavigateTo("/loginPage");
    }
}
