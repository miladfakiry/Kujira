@page "/adminUser"
@using Kujira.Api.Requests
@using Kujira.Gui.Api
@using MudBlazor
@inject IDialogService DialogService
@inject IKujiraBackendApi KujiraBackendApi



<PageTitle>Benutzerverwaltung</PageTitle>

<div class="d-flex justify-space-between align-items-center my-2">
    <h1>Benutzer verwalten</h1>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreateUserDialog">Benutzer erfassen</MudButton>
</div>

@if (!_dataLoaded)
{
    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
}
else
{
    <MudDataGrid Items="@_users"
                 Hover="@_hover"
                 Filterable="false"
                 SortMode="@SortMode.Multiple"
                 Groupable="true"
                 ReadOnly="@_readOnly"
                 StartedEditingItem="@startedEditingCallback"
                 CanceledEditingItem="@canceledEditingCallback"
                 CommittedItemChanges="@committedChangesCallback"
                 Bordered="false"
                 Dense="false">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" Filterable="false"/>

            <PropertyColumn Property="x => x.FirstName" Title="Vorname"/>
            <PropertyColumn Property="x => x.LastName" Title="Nachname">

                <FilterTemplate>
                    <MudIconButton OnClick="@OpenFilter" Icon="@_icon" Size="@Size.Small"/>
                    <MudOverlay Visible="@_filterOpen" OnClick="@(() => _filterOpen = false)"/>
                    <MudPopover Open="@_filterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                Style="width:150px">
                        <MudStack Spacing="0">
                            <MudStack Row="true">
                                <MudButton OnClick="@(() => ClearFilterAsync(context))">Clear</MudButton>
                                <MudButton Color="@Color.Primary" OnClick="@(() => ApplyFilterAsync(context))">Filter</MudButton>
                            </MudStack>
                        </MudStack>
                    </MudPopover>
                </FilterTemplate>

            </PropertyColumn>
            <PropertyColumn Property="x => x.DateOfBirth" Title="Geburtsdatum" Format="dd.MM.yyyy" IsEditable="true"/>
            <PropertyColumn Property="x => x.PhoneNumber" Title="Telefonnummer" Required="false"/>
            <PropertyColumn Property="x => x.CreateDate" Title="Erstellt am:"/>
            <TemplateColumn T="UserRequest" Title="Inaktiv">
                <CellTemplate>
                    <MudCheckBox Checked="@context.Item.IsInactive" Title="Inaktiv" IsEditable="false" Filterable="true" Disabled/>
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Hidden="@_isCellEditMode">
                <CellTemplate>
                    <MudIconButton Color="Color.Primary" Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => StartedEditingItem(context.Item))"/>
                    <MudIconButton Color="Color.Error" Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteUser(context.Item))"/>
                </CellTemplate>
            </TemplateColumn>

        </Columns>

        <PagerContent>
            <MudDataGridPager T="UserRequest"/>
        </PagerContent>

    </MudDataGrid>
}


@code {
    private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
    private bool _dataLoaded;
    private IEnumerable<UserRequest> _users = new List<UserRequest>();
    private UserRequest _selectedUserDto;
    private Guid _id;
    private string _firstName;
    private string _lastName;
    private DateTime _dateOfBirth;
    private string _eMail;
    private string _phoneNumber;
    private DateTime _createDate;
    private bool _isInactive;
    private bool _isIdReadOnly = true;
    private bool isEditing;

    private bool _readOnly;
    private bool _isCellEditMode;
    private static bool _editTriggerRowClick;
    private bool _hover;

    private EventCallback<UserRequest> startedEditingCallback;
    private EventCallback<UserRequest> canceledEditingCallback;
    private EventCallback<UserRequest> committedChangesCallback;


    HashSet<UserRequest> _selectedItems = new();
    HashSet<UserRequest> _filterItems = new();
    FilterDefinition<UserRequest> _filterDefinition;
    bool _selectAll = true;
    string _icon = Icons.Material.Outlined.FilterAlt;
    bool _filterOpen;

    private async Task LoadUsersAsync()
    {
        _users = await KujiraBackendApi.GetUsers();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _dataLoaded = false;
        startedEditingCallback = EventCallback.Factory.Create<UserRequest>(this, StartedEditingItem);
        canceledEditingCallback = EventCallback.Factory.Create<UserRequest>(this, CanceledEditingItem);
        committedChangesCallback = EventCallback.Factory.Create<UserRequest>(this, CommittedItemChanges);


        try
        {
            await LoadUsersAsync();
            logger.Info("Users loaded successfully.");
            _dataLoaded = true;
        }
        catch (Exception e)
        {
            logger.Info($"Error occurred while loading users.: {e}");
            _dataLoaded = true;
            throw;
        }
    }

    private async Task OpenCreateUserDialog()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        var parameters = new DialogParameters();
        parameters.Add("OnUserCreated", EventCallback.Factory.Create<bool>(this, async result =>
        {
            if (result)
            {
                await LoadUsersAsync();
            }
        }));

        var dialog = DialogService.Show<UserForm>("Benutzer erfassen", parameters, options);
        await dialog.Result;
    }


    void OpenFilter()
    {
        _filterOpen = true;
    }

    private void SelectedChanged(bool value, UserRequest item)
    {
        if (value)
            _selectedItems.Add(item);
        else
            _selectedItems.Remove(item);

        if (_selectedItems.Count == _users.Count())
            _selectAll = true;
        else
            _selectAll = false;
    }

    private async Task ClearFilterAsync(FilterContext<UserRequest> context)
    {
        _selectedItems = _users.ToHashSet();
        _filterItems = _users.ToHashSet();
        _icon = Icons.Material.Outlined.FilterAlt;
        await context.Actions.ClearFilterAsync(_filterDefinition);
        _filterOpen = false;
    }

    private async Task ApplyFilterAsync(FilterContext<UserRequest> context)
    {
        _filterItems = _selectedItems.ToHashSet();
        _icon = _filterItems.Count == _users.Count() ? Icons.Material.Outlined.FilterAlt : Icons.Material.Filled.FilterAlt;
        await context.Actions.ApplyFilterAsync(_filterDefinition);
        _filterOpen = false;
    }

    private void SelectAll(bool value)
    {
        _selectAll = value;

        if (value)
        {
            _selectedItems = _users.ToHashSet();
        }
        else
        {
            _selectedItems.Clear();
        }
    }

    private async Task StartedEditingItem(UserRequest item)
    {
        try
        {
            logger.Info($"Starting editing user with ID: {item.Id}.");

            var userToEdit = await KujiraBackendApi.GetUser(item.Id);
            if (userToEdit == null)
            {
                logger.Info($"User not found.");
                return;
            }

            var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };
            var parameters = new DialogParameters
            {
                ["user"] = userToEdit
            };
            var dialog = DialogService.Show<EditUserDialog>("Benutzer bearbeiten", parameters, options);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                logger.Info("User successfully edit.");
                await LoadUsersAsync();
            }
        }
        catch (Exception ex)
        {
            logger.Info($"Error occurred while editing user.: {ex}");
        }
    }

    private async Task CanceledEditingItem(UserRequest item)
    {
    }

    private async Task CommittedItemChanges(UserRequest item)
    {
        try
        {
            await KujiraBackendApi.UpdateUser(item.Id, item);
            logger.Info($"User with Id: {item.Id} successfully updated.");
        }
        catch (Exception ex)
        {
            logger.Info($"Error when updating user: {ex.Message}");
        }
    }


    private async Task DeleteUser(UserRequest item)
    {
        var confirmation = await DialogService.ShowMessageBox("Bestätigen", "Möchten Sie diesen Benutzer wirklich löschen?", "Löschen", cancelText: "Abbrechen");
        if (confirmation != true)
        {
            return;
        }

        try
        {
            await KujiraBackendApi.DeleteUser(item.Id);
            logger.Info($"User with Id: {item.Id} successfully deleted.");
            await LoadUsersAsync();
        }
        catch (Exception ex)
        {
            logger.Info($"Error when deleting user: {ex.Message}");
        }
    }


}