@using Kujira.Gui.Api.Requests
@using MudBlazor
@using Kujira.Api
@using System.ComponentModel.DataAnnotations
@using Kujira.Gui.Api
@using Newtonsoft.Json
@inject IKujiraBackendApi KujiraBackendApi
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudTextField Label="Name der Verwaltung" @bind-Value="@company.Name" Required="true" />
        <MudTextField Label="Strasse" @bind-Value="@company.AddStreet" Required="true" />
        <MudTextField Label="Nummer" @bind-Value="@company.AddStreetNumber" Required="true" />
        <MudTextField Label="PLZ" @bind-Value="@company.ZipCode" Required="true" />
        <MudTextField Label="Stadt" @bind-Value="@company.ZipCity" Required="true" />
        <MudTextField Label="Kanton" @bind-Value="@company.CantonName" Required="true" />
        <MudTextField Label="Land" @bind-Value="@company.CountryName" Required="true" />
        <MudTextField Label="Telefonnummer" @bind-Value="@company.PhoneNumber" Required="true" />
        <MudTextField Label="E-Mail" @bind-Value="@company.EMailAddress" Validation="@(new EmailAddressAttribute() {ErrorMessage = "Die E-Mail Adresse ist nicht gültig"})" Required="true"/>
        <MudTextField Label="Website" @bind-Value="@company.WebsiteAddress"/>

        <MudSelect T="CompanyTypeRequest" Label="Verwaltungstyp" @bind-Value="@selectedCompanyType" OnOpen="@LoadCompanyTypes">
            @if (companyTypes != null)
            {


                @foreach (var type in companyTypes)
                {
                    <MudSelectItem Value="@type"/>
                }
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Abbrechen</MudButton>
        <MudButton OnClick="@SaveCompany">Speichern</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public CompanyRequest company { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private IEnumerable<CompanyTypeRequest> companyTypes;
    private CompanyTypeRequest selectedCompanyType;

    protected override async Task OnInitializedAsync()
    {
        companyTypes = await KujiraBackendApi.GetCompanyTypes();
        if (companyTypes != null && company.CompanyTypeId != Guid.Empty)
        {
            selectedCompanyType = companyTypes.FirstOrDefault(ct => ct.Id == company.CompanyTypeId);
        }

        if (selectedCompanyType == null)
        {
            selectedCompanyType = companyTypes?.FirstOrDefault();
        }
    }

    private async Task LoadCompanyTypes()
    {
        if (companyTypes == null || !companyTypes.Any())
        {
            var companyTypeRespones = await KujiraBackendApi.GetCompanyTypes();
            companyTypes = companyTypeRespones.Select(c => new CompanyTypeRequest(c.Id, c.Type)).ToList();
        }
    }

    private async Task SaveCompany()
    { 
        company.CompanyTypeId = selectedCompanyType.Id;
        company.AddressId = company.AddressId;
        await KujiraBackendApi.UpdateCompany(company.Id, company);
        Snackbar.Add("Verwaltung erfolgreich aktualisiert", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

}