@page "/searchPage"
@using Kujira.Api.Requests
@using MudBlazor
@using Kujira.Api
@using Newtonsoft.Json
@inject HttpClient HttpClient
@inject IJSRuntime JsRuntime
@inject IKujiraBackendApi KujiraBackendApi

<PageTitle>Nach Plätzen suchen</PageTitle>

<h1>Platzsuche</h1>


<MudDataGrid Items="@_offers" ReadOnly="@_isReadOnly" Hover="@_hover" Filterable="false" SortMode="@SortMode.Multiple" Groupable="false" EditMode="@DataGridEditMode.Cell">
    <Columns>
        <HierarchyColumn T="OfferRequest"/>
        <PropertyColumn Property="x => x.Id" Title="Id" Filterable="false"/>
        <PropertyColumn Property="x => x.AvailablePlaces" Title="Verfügbare Plätze"/>
        <PropertyColumn Property="x => x.City" Title="Ort"/>
        <TemplateColumn T="OfferRequest" Title="Langzeitpflege">
            <CellTemplate>
                <MudCheckBox Checked="@context.Item.LongTermFamilyCare" Disabled/>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn T="OfferRequest" Title="Krisenintervention">
            <CellTemplate>
                <MudCheckBox Checked="@context.Item.CrisisIntervention" Disabled/>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn T="OfferRequest" Title="Entlastungsangebot">
            <CellTemplate>
                <MudCheckBox Checked="@context.Item.ReliefOffer" Disabled/>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.CurrentlyPlacedFosterChildren" Title="Aktuelle Pflegekinder"/>
        <PropertyColumn Property="x => x.BiologicalChildren" Title="Biologische Kinder">
            <FilterTemplate>
                <MudIconButton OnClick="@OpenFilter" Icon="@_icon" Size="@Size.Small"/>
                <MudOverlay Visible="@_filterOpen" OnClick="@(() => _filterOpen = false)"/>
                <MudPopover Open="@_filterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                            Style="width:150px">
                    <MudStack Spacing="0">
                        <MudStack Row="true">
                            <MudButton OnClick="@(() => ClearFilterAsync(context))">Clear</MudButton>
                            <MudButton Color="@Color.Primary" OnClick="@(() => ApplyFilterAsync(context))">Filter</MudButton>
                        </MudStack>
                    </MudStack>
                </MudPopover>
            </FilterTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.AdditionalNote" Title="Zusätzliche Informationen"/>
    </Columns>
     <ChildRowContent>
         <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">@context.Item.CompanyName</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.h6">Kontaktdaten:</MudText>
                <MudText>
                    <a href="tel:@context.Item.PhoneNumber">@context.Item.PhoneNumber</a>
                </MudText>
                <MudText>
                    <a href="mailto:@context.Item.EMailAddress">@context.Item.EMailAddress</a>
                </MudText>
                <div style="width: 100%; height: 200px; margin-top: 20px;">
                    <iframe width="100%"
                            height="100%"
                            frameborder="0"
                            style="border:0"
                            src="https://www.google.com/maps/embed/v1/search?q=@context.Item.ZipCode&key=AIzaSyBXuXp8Lhv83I8uDc7HILgaGuaMxhvBPpQ"
                            allowfullscreen>
                    </iframe>
                </div>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => AskAQuestion())" Color="Color.Info">Anfragen</MudButton>
            </MudCardActions>
        </MudCard>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T="OfferRequest" />
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<OfferRequest> _offers = new List<OfferRequest>();
    private bool _hover = true;
    private bool _isReadOnly = true;
    HashSet<OfferRequest> _selectedItems = new();
    HashSet<OfferRequest> _filterItems = new();
    FilterDefinition<OfferRequest> _filterDefinition;
    bool _selectAll = true;
    string _icon = Icons.Material.Outlined.FilterAlt;

    bool _filterOpen;


    protected override async void OnInitialized()
    {
        try
        {
            _offers = await KujiraBackendApi.GetOffers();
            Console.WriteLine("API response received: " + JsonConvert.SerializeObject(_offers));
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching offers: " + ex.ToString());
            throw;
        }
    }

    void OpenFilter()
    {
        _filterOpen = true;
    }

    private void SelectedChanged(bool value, OfferRequest item)
    {
        if (value)
            _selectedItems.Add(item);
        else
            _selectedItems.Remove(item);

        if (_selectedItems.Count == _offers.Count())
            _selectAll = true;
        else
            _selectAll = false;
    }

    private async Task ClearFilterAsync(FilterContext<OfferRequest> context)
    {
        _selectedItems = _offers.ToHashSet();
        _filterItems = _offers.ToHashSet();
        _icon = Icons.Material.Outlined.FilterAlt;
        await context.Actions.ClearFilterAsync(_filterDefinition);
        _filterOpen = false;
    }

    private async Task ApplyFilterAsync(FilterContext<OfferRequest> context)
    {
        _filterItems = _selectedItems.ToHashSet();
        _icon = _filterItems.Count == _offers.Count() ? Icons.Material.Outlined.FilterAlt : Icons.Material.Filled.FilterAlt;
        await context.Actions.ApplyFilterAsync(_filterDefinition);
        _filterOpen = false;
    }

    private void SelectAll(bool value)
    {
        _selectAll = value;

        if (value)
        {
            _selectedItems = _offers.ToHashSet();
        }
        else
        {
            _selectedItems.Clear();
        }
    }

    private async Task AskAQuestion()
    {
        Console.WriteLine("Nachricht an Verband gesendet!");
    }

}