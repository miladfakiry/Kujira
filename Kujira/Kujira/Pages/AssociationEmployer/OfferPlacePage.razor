@page "/offerPlaces"
@using Kujira.Api.Requests
@using Kujira.Gui.Api.Requests
@using Kujira.Gui.Services
@using MudBlazor
@using Newtonsoft.Json
@using Kujira.Api
@inject IKujiraBackendApi KujiraBackendApi
@inject ISnackbar Snackbar
@inject AuthenticationService AuthService

<h1>Plätze anbieten</h1>
<MudCard>
    <MudForm Model="@offerRequest" @ref="@form">
        <MudCardContent>
            <MudTextField @bind-Value="offerRequest.AvailablePlaces" Label="Verfügbare Plätze" For="() => offerRequest.AvailablePlaces"/>
            <MudCheckBox @bind-Value="offerRequest.LongTermFamilyCare" Label="Langzeitpflege" For="() => offerRequest.LongTermFamilyCare"/>
            <MudCheckBox @bind-Value="offerRequest.CrisisIntervention" Label="Krisenintervention" For="() => offerRequest.CrisisIntervention"/>
            <MudCheckBox @bind-Value="offerRequest.ReliefOffer" Label="Entlastungsangebot" For="() => offerRequest.ReliefOffer"/>

            <MudTextField @bind-Value="offerRequest.CurrentlyPlacedFosterChildren" Label="Aktuell platzierte Pflegekinder" For="() => offerRequest.CurrentlyPlacedFosterChildren"/>
            <MudTextField @bind-Value="offerRequest.BiologicalChildren" Label="Biologische Kinder" For="() => offerRequest.BiologicalChildren"/>
            <MudTextField @bind-Value="offerRequest.AdditionalNote" Label="Zusätzliche Informationen" Multiline For="() => offerRequest.AdditionalNote"/>

            <MudSelect T="ZipRequest" Label="PLZ" @bind-Value="@_selectedZip" OnOpen="GetByCodeWithCantonAndCountry">
                @if (zips != null)
                {
                    @foreach (var zip in zips)
                    {
                        <MudSelectItem Value="@zip"/>
                    }
                }
            </MudSelect>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">Speichern</MudButton>
        </MudCardActions>
    </MudForm>
</MudCard>

@code {
    private readonly OfferRequest offerRequest = new();
    private MudForm form;
    private IEnumerable<ZipRequest> zips;
    private ZipRequest _selectedZip;


    protected override async Task OnInitializedAsync()
    {
        offerRequest.UserId = await AuthService.GetLoggedInUserIdAsync();
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Console.WriteLine($"ICH BIN NEU: LongTermFamilyCare: {offerRequest.LongTermFamilyCare}, CrisisIntervention: {offerRequest.CrisisIntervention}, ReliefOffer: {offerRequest.ReliefOffer}");


            offerRequest.ZipId = _selectedZip?.Id ?? Guid.Empty;

            try
            {
                Console.WriteLine("Sending Offer Request: " + JsonConvert.SerializeObject(offerRequest));
                await KujiraBackendApi.CreateOffer(offerRequest);
                Snackbar.Add("Angebot erfolgreich eingereicht!", Severity.Success);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
                Snackbar.Add($"Fehler beim Einreichen des Angebots: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task GetByCodeWithCantonAndCountry()
    {
        if (zips == null || !zips.Any())
        {
            var zipResponses = await KujiraBackendApi.GetZips();
            zips = zipResponses.Select(c => new ZipRequest(c.Id, c.Code, c.City, c.CantonId, c.Canton, c.CountryId, c.Country)).ToList();
        }
    }
}