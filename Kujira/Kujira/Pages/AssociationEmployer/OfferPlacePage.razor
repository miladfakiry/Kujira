@page "/offerPlaces"
@using FluentValidation
@using MudBlazor

<h1>Plätze anbieten</h1>
<MudCard>
    <MudForm Model="@model" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <MudTextField @bind-Value="model.Name"
                          For="@(() => model.Name)"
                          Immediate="true"
                          Label="Name"/>

            <MudTextField @bind-Value="model.Email"
                          For="@(() => model.Email)"
                          Immediate="true"
                          Label="Email"/>

            <MudTextField @bind-Value="model.Address.Address"
                          For="@(() => model.Address.Address)"
                          Immediate="true"
                          Label="Address"/>

            <MudTextField @bind-Value="model.Address.City"
                          For="@(() => model.Address.City)"
                          Immediate="true"
                          Label="City"/>

            <MudTextField @bind-Value="model.Address.Country"
                          For="@(() => model.Address.Country)"
                          Immediate="true"
                          Label="Country"/>
            <MudTextField @bind-Value="model.AdditionalInformation"
                          For="@(() => model.AdditionalInformation)"
                          Immediate="true"
                          Label="Zusätzliche Informationen"/>
        </MudCardContent>
        <MudCardContent Class="pa-0">

        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Speichern</MudButton>
    </MudCardActions>
</MudCard>

@code {

    [Inject]
    ISnackbar Snackbar { get; set; }

    MudForm form;

    readonly OrderModelFluentValidator orderValidator = new();

    readonly OrderModel model = new();

    public class OrderModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string AdditionalInformation { get; set; }
        public AddressModel Address { get; set; } = new();
    }

    public class AddressModel
    {
        public string Address { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
    }

    public class OrderDetailsModel
    {
        public string AdditionalInformation { get; set; }
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Snackbar.Add("Angebot erfolgreich eingereicht!");
        }
    }

    /// <summary>
    ///     A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="OrderModel"></typeparam>
    public class OrderModelFluentValidator : AbstractValidator<OrderModel>
    {
        public OrderModelFluentValidator()
        {
            RuleFor(x => x.Name).NotEmpty().Length(1, 100);

            RuleFor(x => x.Email).Cascade(CascadeMode.Stop).NotEmpty().EmailAddress().MustAsync(async (value, cancellationToken) => await IsUniqueAsync(value));

            RuleFor(x => x.Address.Address).NotEmpty().Length(1, 100);

            RuleFor(x => x.Address.City).NotEmpty().Length(1, 100);

            RuleFor(x => x.Address.Country).NotEmpty().Length(1, 100);

        }

        private async Task<bool> IsUniqueAsync(string email)
        {
    // Simulates a long running http call
            await Task.Delay(2000);
            return email.ToLower() != "test@test.com";
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<OrderModel>.CreateWithOptions((OrderModel) model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

}